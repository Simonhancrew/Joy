#include <algorithm>
#include <functional>
#include <unordered_set>


using namespace std;

// 因为这个点被init移除之后依然可能被感染，所以有用的删除以为着一个连通块里只有一个感染点
// 遍历init中的点，照这样的联通块就可以了

class Solution {
public:
  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int n = graph.size();
    int ans = -1;
    int max_size = 0, size = 0;
    int node = -1;
    unordered_set<int> st(initial.begin(), initial.end());
    vector<int> vis(n);
    function<void(int)> dfs = [&](int x) {
      vis[x] = true;
      ++size;
      if (node != -2 && st.contains(x)) {
        node = node == -1 ? x : -2;
      }
      for (int y = 0; y < n; y++) {
        if (graph[x][y] && !vis[y]) {
          dfs(y);
        }
      }
    };
    for (const auto x : initial) {
      if (vis[x]) {
        continue;
      }
      node = -1;
      size = 0;
      dfs(x);
      if (node >= 0 && (size > max_size || size == max_size && node < ans)) {
        ans = node;
        max_size = size;
      }
    }
    return ans < 0 ? ranges::min(initial) : ans;
  }
};
